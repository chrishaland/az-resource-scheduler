// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EnvironmentResource", b =>
                {
                    b.Property<Guid>("EnvironmentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResourcesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EnvironmentsId", "ResourcesId");

                    b.HasIndex("ResourcesId");

                    b.ToTable("EnvironmentResources", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Environment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScheduledStartup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScheduledUptime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("Repository.Models.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Providers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Provider");
                });

            modelBuilder.Entity("Repository.Models.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResourceGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ResourceGroup");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("Name", "ResourceGroup")
                        .IsUnique();

                    b.ToTable("Resources", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Resource");
                });

            modelBuilder.Entity("Repository.Models.ResourceStopJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StopAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourceStopJobs");
                });

            modelBuilder.Entity("Repository.Models.AzureProvider", b =>
                {
                    b.HasBaseType("Repository.Models.Provider");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Providers", (string)null);

                    b.HasDiscriminator().HasValue("AzureProvider");
                });

            modelBuilder.Entity("Repository.Models.VirtualMachine", b =>
                {
                    b.HasBaseType("Repository.Models.Resource");

                    b.ToTable("Resources", (string)null);

                    b.HasDiscriminator().HasValue("VirtualMachine");
                });

            modelBuilder.Entity("Repository.Models.VirtualMachineScaleSet", b =>
                {
                    b.HasBaseType("Repository.Models.Resource");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("Resources", (string)null);

                    b.HasDiscriminator().HasValue("VirtualMachineScaleSet");
                });

            modelBuilder.Entity("EnvironmentResource", b =>
                {
                    b.HasOne("Repository.Models.Environment", null)
                        .WithMany()
                        .HasForeignKey("EnvironmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.Resource", null)
                        .WithMany()
                        .HasForeignKey("ResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Repository.Models.Resource", b =>
                {
                    b.HasOne("Repository.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Repository.Models.ResourceStopJob", b =>
                {
                    b.HasOne("Repository.Models.Resource", "Resource")
                        .WithMany("ResourceStopJobs")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Repository.Models.AzureProvider", b =>
                {
                    b.HasOne("Repository.Models.Provider", null)
                        .WithOne("AzureProvider")
                        .HasForeignKey("Repository.Models.AzureProvider", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Repository.Models.VirtualMachine", b =>
                {
                    b.HasOne("Repository.Models.Resource", null)
                        .WithOne("VirtualMachine")
                        .HasForeignKey("Repository.Models.VirtualMachine", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Repository.Models.VirtualMachineScaleSet", b =>
                {
                    b.HasOne("Repository.Models.Resource", null)
                        .WithOne("VirtualMachineScaleSet")
                        .HasForeignKey("Repository.Models.VirtualMachineScaleSet", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Repository.Models.Provider", b =>
                {
                    b.Navigation("AzureProvider");
                });

            modelBuilder.Entity("Repository.Models.Resource", b =>
                {
                    b.Navigation("ResourceStopJobs");

                    b.Navigation("VirtualMachine");

                    b.Navigation("VirtualMachineScaleSet");
                });
#pragma warning restore 612, 618
        }
    }
}
